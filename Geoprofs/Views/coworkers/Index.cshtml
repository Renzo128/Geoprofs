@model IEnumerable<Geoprofs.Models.Coworker>
@using Newtonsoft.Json;



@{
    ViewData["Title"] = "Index";//datum ophalen / zette
    int jaar = DateTime.Now.Year;
    int januari = 31;
    int schrikkeljaar = jaar % 4;
    int februari;
    if(schrikkeljaar == 0)
    {
        februari = 29;
    }
    else
    {
        februari = 28;
    }
    int maart = 31;
    int april = 30;
    int mei = 31;
    int juni = 30;
    int juli = 31;
    int augustus = 31;
    int september = 30;
    int oktober = 31;
    int november = 30;
    int december = 31;

    int[] arr = { 0,januari, februari, maart, april, mei, juni, juli, augustus, september, oktober, november, december }; 
    int currentMonth = DateTime.Now.Month;
    int currentYear = DateTime.Now.Year;
    int CurrentMonth = DateTime.Now.Month;

    int CurrentMonth2 = DateTime.Now.Month;
    int currentYear2 = DateTime.Now.Year;
    int currentDay = DateTime.Now.Day;
    if(TempData["month"] != null && TempData["year"] != null)
    {
        currentMonth =(int) TempData["month"];
        currentYear =(int) TempData["year"];
        CurrentMonth = (int)TempData["month"];


    }

    int VorigeMaand = 0;
    int MomenteleMaand = 0;
    int loop = 1;
    int volgendemaand = 0;
    int MomenteleMaand2 = 0;
    while (loop != 13)
    {
        if(loop == CurrentMonth)
        {
            if(loop == 1)
            {
                VorigeMaand = arr[11];
                volgendemaand = arr[loop + 1];
            }
            else if(loop == 12)
            {
                volgendemaand = arr[1];
                VorigeMaand = arr[loop - 1];
            }
            else
            {
                VorigeMaand = arr[loop - 1];
                volgendemaand = arr[loop + 1];
            }
            MomenteleMaand = arr[loop];
            MomenteleMaand2 = arr[loop];
        }
        loop++;
    }

    DateTime value = new DateTime(currentYear, CurrentMonth2, 1);
    int StartDayLastMonth = (int)value.DayOfWeek;
    if(StartDayLastMonth != 0)
    {
    StartDayLastMonth = StartDayLastMonth - 1;
    }




}
<h1 style="margin-bottom: 50px;">Verlof planning</h1>
<div class="root-container">
<div class="text-container">
<p><strong>Maand:</strong> @currentMonth</p>
<p><strong>Jaar:</strong> @currentYear</p>
</div>
<div class="button-container">  <!-- naar vorige maand-->
@using (Html.BeginForm("PastMonth", "AbsenceRequests"))
{
    <input type="hidden" name="month" value="@currentMonth" id="month"/>
    <input type="hidden" name="year" value="@currentYear" id="year"/>

    <button type="submit" class="button">Vorige</button>
}

@using (Html.BeginForm("NextMonth", "AbsenceRequests")) //naar volgende maand gaan
{
        <input type="hidden" name="month" value="@currentMonth" id="month"/>
    <input type="hidden" name="year" value="@currentYear" id="year"/>
    <button type="submit" class="button">Volgende</button>
}
</div>
</div>

@{
    // ophalen welke dag de maand begint
    int displayLoop = 1;
    int fullWeek = 1;
    int lastMonth = 0;
    int displayLoop2 = 1;
    int fullWeek2 = 1;
    int fixCounter = 0;

    int displayLastMonth = VorigeMaand - StartDayLastMonth;
    if(StartDayLastMonth == 1){
        StartDayLastMonth = 0;
    }
    int displayLastMonth2 = VorigeMaand - StartDayLastMonth;
    int currentDayToday = (int)DateTime.Now.DayOfWeek;
    int useLastMonth = 0;
    int usedWeeks = 0;
    while(currentDayToday != 1){

    currentDay = currentDay - 1;
    currentDayToday = currentDayToday - 1;
    if(currentDay == 0){
    useLastMonth = 1;
    }


    }

    

}


@while (displayLoop <= MomenteleMaand){
    if(fullWeek == 1)
    {
            @:<div class="row">

    }


        @while(displayLastMonth != VorigeMaand){    // vorige maand
            displayLastMonth++; // alle dagen van de vorige maand die eindigt in de momentele maand displayen

                @:<div class="col single-day last-month">
            <p class="number">
                    @displayLastMonth
                    </p>
        @foreach (var item in Model)
        {
            @foreach (var item2 in item.AbsenceRequest)
            {
                    TempData.Keep("supervisor");    // verlof hoort bij de afdeling en is goedgekeurd
                    TempData.Keep("userId");

                if (item.supervisor == (int)TempData["supervisor"] && item2.absenceStatus == "Geaccepteerd"|| (int)TempData["role"] == 6 && item2.absenceStatus == "Geaccepteerd" && item2.coworker.position < 6 || (int)TempData["role"] == 7 && item2.absenceStatus == "Geaccepteerd" )
                { 

                    TempData.Keep("supervisor");

                int start = item2.AbsenceStart.Day; // verlof informatie ophalen
                int end = (int)item2.AbsenceEnd.Day;
                int startmonth = item2.AbsenceStart.Month;
                int endmonth = item2.AbsenceEnd.Month;
                int LastMonthForDisplay = currentMonth - 1;
                int StartYear = item2.AbsenceStart.Year;
                int endYear = item2.AbsenceEnd.Year;
                    int startyear = item2.AbsenceStart.Year;
                    DateTime longVacationStart = item2.AbsenceStart;
                DateTime longVacationEnd = item2.AbsenceEnd;
                longVacationEnd = longVacationEnd.AddMonths(-1);

                if (currentYear <= StartYear && currentYear >= endYear && start <= displayLastMonth && LastMonthForDisplay == startmonth && endmonth > LastMonthForDisplay || currentYear <= StartYear && currentYear >= endYear && start <= displayLastMonth && LastMonthForDisplay == startmonth && endmonth == LastMonthForDisplay && end >= displayLastMonth ||currentYear <= StartYear && currentYear >= endYear && startmonth <= CurrentMonth && endmonth >= currentMonth && longVacationEnd > longVacationStart)
                {
                    <p class="name @item.Position.positionName " >    <!-- verlof dispalyen-->
                        @Html.DisplayFor(modelItem => item.CoworkerName)
                    </p>
                }

            }
                    TempData.Keep("supervisor");

        }
    }
                @:</div>
            fullWeek++; 
        }

    <div class="col single-day">
        <p class="number">
            @displayLoop
            </p>


    @foreach (var item in Model) {  // momentele maand

            @foreach (var item2 in item.AbsenceRequest)
            {
                TempData.Keep("supervisor");
                TempData.Keep("userId");
                if (item.supervisor == (int)TempData["supervisor"] && item2.absenceStatus == "Geaccepteerd"|| (int)TempData["role"] == 6 && item2.absenceStatus == "Geaccepteerd" && item2.coworker.position < 6 || (int)TempData["role"] == 7 && item2.absenceStatus == "Geaccepteerd" )
                {
                    TempData.Keep("supervisor");
                    int start = item2.AbsenceStart.Day; //verlof data ophalen
                    int end = (int)item2.AbsenceEnd.Day;
                    int startmonth = item2.AbsenceStart.Month;
                    int endmonth = item2.AbsenceEnd.Month;
                    int startyear = item2.AbsenceStart.Year;
                    int endyear = item2.AbsenceEnd.Year;



                    if (currentYear == startyear && currentYear == endyear && start <= displayLoop && end >= displayLoop && currentMonth == startmonth && currentMonth == endmonth || currentYear == startyear && startmonth < currentMonth && endmonth >= currentMonth && end >= displayLoop || currentYear == startyear && startmonth < currentMonth && endmonth > currentMonth || currentYear == startyear && startmonth == currentMonth && endmonth > currentMonth && start <= displayLoop||currentYear == startyear && currentYear == endyear && endmonth >= currentMonth && end >= displayLoop && startyear < currentYear)
                    {
                        <p class="name @item.Position.positionName">    <!-- verlof displayen-->

                            @Html.DisplayFor(modelItem => item.CoworkerName)
                        </p>
                    }
                }
            }
        }
    </div>

    if(displayLoop == MomenteleMaand && fullWeek != 7)
    {
        
            displayLastMonth = 0;
        

        @while (fullWeek != 7) {    // volgende maand displayen
            displayLastMonth++;

            @:<div class="col single-day next-month">
                <p class="number">
            @displayLastMonth
            </p>
            @foreach (var item in Model)
            {
                @foreach (var item2 in item.AbsenceRequest)
                {
                    TempData.Keep("supervisor");
                    TempData.Keep("userId");//verlof data van de afdeling inzien die is geaccepteerd
                    if (item.supervisor == (int)TempData["supervisor"] && item2.absenceStatus == "Geaccepteerd"|| (int)TempData["role"] == 6 && item2.absenceStatus == "Geaccepteerd" && item2.coworker.position < 6 || (int)TempData["role"] == 7 && item2.absenceStatus == "Geaccepteerd" )
                    {
                    TempData.Keep("supervisor");

                        int start = item2.AbsenceStart.Day;
                        int end = (int)item2.AbsenceEnd.Day;
                        int startmonth = item2.AbsenceStart.Month;
                        int endmonth = item2.AbsenceEnd.Month;
                        int NextMonthForDisplay = currentMonth + 1;
                        if (NextMonthForDisplay == 13)
                        {
                            NextMonthForDisplay = 1;
                        }
                        DateTime longVacationStart = item2.AbsenceStart;
                        DateTime longVacationEnd = item2.AbsenceEnd;
                        longVacationEnd = longVacationEnd.AddMonths(-1);
                        int endyear = item2.AbsenceEnd.Year;
                        int startyear = item2.AbsenceStart.Year;
                        if (currentYear <= endyear && currentYear >= startyear && start <= displayLastMonth && end >= displayLastMonth && endmonth >= NextMonthForDisplay && startmonth <= NextMonthForDisplay ||currentYear <= endyear && currentYear >= startyear && NextMonthForDisplay > startmonth && NextMonthForDisplay == endmonth && start >= displayLastMonth||currentYear <= endyear && currentYear >= startyear && startmonth <= CurrentMonth && endmonth >= currentMonth && longVacationEnd > longVacationStart && end <= NextMonthForDisplay||currentYear <= endyear && currentYear >= startyear && startmonth == CurrentMonth &&  start >= displayLastMonth  && longVacationEnd > longVacationStart)

                        {   
<!-- verlof displayen-->
                            <p class="name @item.Position.positionName">
                                @Html.DisplayFor(modelItem => item.CoworkerName)
                            </p>
                        }
                    }
                }
        }
            @:</div>
            fullWeek++;
        }
    }




    @if(fullWeek == 7){
        fullWeek = 0;
        @:</div>
    }
    fullWeek++;

    displayLoop++;

}
<div class="row legenda-container">
    <span class="legenda finance"><p>Finance</p>  <p>@TempData["teamAbsence1"] % </p></span>
    <span class="legenda relation management"><p>Relation Management </p>  <p>@TempData["teamAbsence2"] %</p></span>
    <span class="legenda geodesy"><p>Geodesy </p>  <p>@TempData["teamAbsence3"] %</p></span>
    <span class="legenda geo-ICT"><p>Geo-ICT </p>  <p>@TempData["teamAbsence4"] %</p></span>
    <span class="legenda ict"><p>ICT </p>  <p>@TempData["teamAbsence5"] %</p></span>
    <span class="legenda hrm"><p>HRM </p>  <p>@TempData["teamAbsence6"] %</p></span>
    <span class="legenda ceo"><p>CEO </p>  <p>@TempData["teamAbsence7"] %</p></span>
            @if (TempData["teamAbsence"] != null) {

        TempData.Keep("teamAbsence1");
        TempData.Keep("teamAbsence2");
        TempData.Keep("teamAbsence3");
        TempData.Keep("teamAbsence4");
        TempData.Keep("teamAbsence5");
        TempData.Keep("teamAbsence6");
        TempData.Keep("teamAbsence7");

    }

</div>

@while (displayLoop2 <= MomenteleMaand2 && usedWeeks != 3){
    if(fullWeek2 == 1)
    {
            @:<div class="row">
            usedWeeks = usedWeeks + 1;
    }


        @while(displayLastMonth2 != VorigeMaand && currentDay == 1){    // vorige maand
            displayLastMonth2++; // alle dagen van de vorige maand die eindigt in de momentele maand displayen
        @:<div class="col single-day last-month">
            <p class="number">
                    @displayLastMonth2
                    </p>
        @foreach (var item in Model)
        {
            @foreach (var item2 in item.AbsenceRequest)
            {
                    TempData.Keep("supervisor");    // verlof hoort bij de afdeling en is goedgekeurd
                    TempData.Keep("userId");

                if (item.supervisor == (int)TempData["supervisor"] && item2.absenceStatus == "Geaccepteerd")
                { 

                    TempData.Keep("supervisor");

                int start = item2.AbsenceStart.Day; // verlof informatie ophalen
                int end = (int)item2.AbsenceEnd.Day;
                int startmonth = item2.AbsenceStart.Month;
                int endmonth = item2.AbsenceEnd.Month;
                int LastMonthForDisplay = CurrentMonth2 - 1;
                int StartYear = item2.AbsenceStart.Year;
                int endYear = item2.AbsenceEnd.Year;
                    int startyear = item2.AbsenceStart.Year;
                    DateTime longVacationStart = item2.AbsenceStart;
                DateTime longVacationEnd = item2.AbsenceEnd;
                longVacationEnd = longVacationEnd.AddMonths(-1);

                if (currentYear <= StartYear && currentYear >= endYear && start <= currentDay && end >= currentDay && endmonth > LastMonthForDisplay || currentYear <= StartYear && currentYear >= endYear && start <= displayLastMonth && LastMonthForDisplay == startmonth && endmonth == LastMonthForDisplay && end >= displayLastMonth ||currentYear <= StartYear && currentYear >= endYear && startmonth <= CurrentMonth2 && endmonth >= CurrentMonth2 && longVacationEnd > longVacationStart)
                {
                    <p class="name @item.Position.positionName " >    <!-- verlof dispalyen-->
                        @Html.DisplayFor(modelItem => item.CoworkerName)
                    </p>
                }

            }
                    TempData.Keep("supervisor");

        }
    }
                @:</div>
        fullWeek2++;
        fixCounter++;
    }
    @if (usedWeeks != 3 && currentDay <= MomenteleMaand2) {



    <div class="col single-day">
        <p class="number">
            @currentDay
            </p>


    @foreach (var item in Model) {  // momentele maand

            @foreach (var item2 in item.AbsenceRequest)
            {
                TempData.Keep("supervisor");
                TempData.Keep("userId");
                if (item.supervisor == (int)TempData["supervisor"] && item2.absenceStatus == "Geaccepteerd")
                {
                    TempData.Keep("supervisor");
                    int start = item2.AbsenceStart.Day; //verlof data ophalen
                    int end = (int)item2.AbsenceEnd.Day;
                    int startmonth = item2.AbsenceStart.Month;
                    int endmonth = item2.AbsenceEnd.Month;
                    int startyear = item2.AbsenceStart.Year;
                    int endyear = item2.AbsenceEnd.Year;



                    if (currentYear == startyear && currentYear == endyear && start <= currentDay && end >= currentDay  && CurrentMonth2 == startmonth && CurrentMonth2 == endmonth || currentYear == startyear && startmonth < CurrentMonth2 && endmonth >= CurrentMonth2 && end >= displayLoop || currentYear == startyear && startmonth < CurrentMonth2 && endmonth > CurrentMonth2 || currentYear == startyear && startmonth == CurrentMonth2 && endmonth > CurrentMonth2 && start <= currentDay||currentYear == startyear && currentYear == endyear && endmonth >= CurrentMonth2 && end >= displayLoop && startyear < currentYear)
                    {
                        <p class="name @item.Position.positionName">    <!-- verlof displayen-->

                            @Html.DisplayFor(modelItem => item.CoworkerName)
                        </p>
                    }
                }
            }
        }
    
        </div>
        if (currentDay != MomenteleMaand2)
        {
            currentDay++;
        }



    }

    if(currentDay == MomenteleMaand2 && fullWeek2 != 7)
    {
        displayLastMonth2 = 0;
        currentDay = 1;


        @while (fullWeek2 != 7 && usedWeeks != 3) {    // volgende maand displayen
            displayLastMonth2++;
            currentDay++;
            int dayOfWeek = (int)DateTime.Now.DayOfWeek - 1;
            if(fixCounter == dayOfWeek)
            {
            }
            if(fixCounter == 6)
            {
                fixCounter = 0;
            }
    fixCounter++;



            @:<div class="col single-day next-month">
                <p class="number">
            @currentDay
            </p>
            @foreach (var item in Model)
            {
                @foreach (var item2 in item.AbsenceRequest)
                {
                    TempData.Keep("supervisor");
                    TempData.Keep("userId");//verlof data van de afdeling inzien die is geaccepteerd
                    if (item.supervisor == (int)TempData["supervisor"] && item2.absenceStatus == "Geaccepteerd")
                    {
                    TempData.Keep("supervisor");

                        int start = item2.AbsenceStart.Day;
                        int end = (int)item2.AbsenceEnd.Day;
                        int startmonth = item2.AbsenceStart.Month;
                        int endmonth = item2.AbsenceEnd.Month;
                        int NextMonthForDisplay = CurrentMonth2 + 1;
                        if (NextMonthForDisplay == 13)
                        {
                            NextMonthForDisplay = 1;
                        }
                        DateTime longVacationStart = item2.AbsenceStart;
                        DateTime longVacationEnd = item2.AbsenceEnd;
                        longVacationEnd = longVacationEnd.AddMonths(-1);
                        int endyear = item2.AbsenceEnd.Year;
                        int startyear = item2.AbsenceStart.Year;
                        if (currentYear <= endyear && currentYear >= startyear && end >= currentDay && endmonth >= NextMonthForDisplay ||currentYear <= endyear && currentYear >= startyear && NextMonthForDisplay > startmonth && NextMonthForDisplay == endmonth && start >= currentDay||currentYear <= endyear && currentYear >= startyear && startmonth <= CurrentMonth2 && endmonth >= CurrentMonth2 && longVacationEnd > longVacationStart && end <= NextMonthForDisplay||currentYear <= endyear && currentYear >= startyear && startmonth == CurrentMonth2 &&  start >= currentDay  && longVacationEnd > longVacationStart)

                        {   
<!-- verlof displayen-->
                            <p class="name @item.Position.positionName">
                                @Html.DisplayFor(modelItem => item.CoworkerName)
                            </p>
                        }
                    }
                }
        }
            @:</div>
            fullWeek2++;
        }
    }




    @if(fullWeek2 == 7){
            

        fullWeek2 = 0;
        @:</div>
    }
    fullWeek2++;

    displayLoop2++;

}