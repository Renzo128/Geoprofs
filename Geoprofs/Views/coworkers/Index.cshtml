@model IEnumerable<Geoprofs.Models.Coworker>
@using Newtonsoft.Json;



@{
    ViewData["Title"] = "Index";
    int Jaar = DateTime.Now.Year;
    int Januari = 31;
    int Schrikkeljaar = Jaar % 4;
    int Februari;
    if(Schrikkeljaar == 0)
    {
        Februari = 29;
    }
    else
    {
        Februari = 28;
    }
    int Maart = 31;
    int April = 30;
    int Mei = 31;
    int Juni = 30;
    int Juli = 31;
    int Augustus = 31;
    int September = 30;
    int Oktober = 31;
    int November = 30;
    int December = 31;

    int[] arr = { 0,Januari, Februari, Maart, April, Mei, Juni, Juli, Augustus, September, Oktober, November, December }; 
    int CurrentMonth = DateTime.Now.Month;

    int VorigeMaand = 0;
    int MomenteleMaand = 0;
    int Loop = 1;
    int volgendemaand = 0;
    while (Loop != 13)
    {
        if(Loop == CurrentMonth)
        {
            if(Loop == 1)
            {
                VorigeMaand = arr[11];
                volgendemaand = arr[Loop + 1];
            }
            else if(Loop == 12)
            {
                volgendemaand = arr[1];
                VorigeMaand = arr[Loop - 1];
            }
            else
            {
                VorigeMaand = arr[Loop - 1];
                volgendemaand = arr[Loop + 1];
            }
            MomenteleMaand = arr[Loop];
        }
        Loop++;
    }
    int currentMonth = DateTime.Now.Month;
    int currentYear = (int)DateTime.Now.Year;
    DateTime value = new DateTime(currentYear, currentMonth, 1);
    int StartDayLastMonth = (int)value.DayOfWeek;
    StartDayLastMonth = StartDayLastMonth - 1;

}
<h1 style="margin-bottom: 50px;">Verlof planning</h1>

@{
    int displayLoop = 1;
    int FullWeek = 1;
    int lastmonth = 0;

    int displayLastMonth = VorigeMaand - StartDayLastMonth;
}


@while (displayLoop <= MomenteleMaand){
    if(FullWeek == 1)
    {
            @:<div class="row mobile-styling" style="height:150px;">

    }


        @while(displayLastMonth != VorigeMaand){    // vorige maand
            displayLastMonth++;

                @:<div class="col single-day last-month">
            <p class="number">
                    @displayLastMonth
                    </p>
                    @foreach (var item in Model) {

        @foreach(var item2 in item.AbsenceRequest)
        {
                int start = item2.AbsenceStart.Day;
                int end = (int) item2.AbsenceEnd.Day;
                int startmonth = item2.AbsenceStart.Month;
                int endmonth = item2.AbsenceEnd.Month;
                int LastMonthForDisplay = currentMonth - 1;

                //@startmonth

            if(start <= displayLastMonth  && LastMonthForDisplay == startmonth)
            {
        <br />
        <p class="name">
            @Html.DisplayFor(modelItem => item.CoworkerName)
            </p>
                
            }

        }
    }
                @:</div>
            FullWeek++;
        }

    <div class="col single-day">
        <p class="number">
            @displayLoop
            </p>


    @foreach (var item in Model) {

        @foreach(var item2 in item.AbsenceRequest)
        {
            int start = item2.AbsenceStart.Day;
            int end = (int) item2.AbsenceEnd.Day;
            int startmonth = item2.AbsenceStart.Month;
            int endmonth = item2.AbsenceStart.Month;


            if(start <= displayLoop && end >= displayLoop && currentMonth == startmonth && currentMonth == endmonth)
            {
               <p class="name">

            @Html.DisplayFor(modelItem => item.CoworkerName)
            </p>
                
            }

        }
    }
    <br />
    </div>

    if(displayLoop == MomenteleMaand && FullWeek != 7)
    {
        
            displayLastMonth = 0;
        

        @while (FullWeek != 7) {    // volgende maan displayen
            displayLastMonth++;

            @:<div class="col single-day next-month">
                <p class="number">
            @displayLastMonth
            </p>
            @foreach (var item in Model) {

                @foreach (var item2 in item.AbsenceRequest)
                {
                    int start = item2.AbsenceStart.Day;
                    int end = (int)item2.AbsenceEnd.Day;
                    int startmonth = item2.AbsenceStart.Month;
                    int endmonth = item2.AbsenceEnd.Month;
                    int NextMonthForDisplay = currentMonth + 1;
                    if ( NextMonthForDisplay >= startmonth && NextMonthForDisplay == endmonth&& end >= displayLastMonth)
                    {
                        <p class="name">
                        @Html.DisplayFor(modelItem => item.CoworkerName)
                        </p>
                    }

                }
            }
            @:</div>
            FullWeek++;
        }
    }




    @if(FullWeek == 7){
        FullWeek = 0;
        @:</div>
    }
    FullWeek++;

    displayLoop++;

}
